# -*- coding: utf-8 -*-
"""similarity_checker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJ6iYzWX7nzJwfTBHzN1db0jWMHl6VfO
"""

from sentence_transformers import SentenceTransformer, util
import numpy as np

# 🔍 Load sentence transformer model
model = SentenceTransformer("all-MiniLM-L6-v2")  # Small, fast, works well

def check_similarity(main_text: str, scraped_texts: list) -> dict:
    try:
        main_embedding = model.encode(main_text, convert_to_tensor=True)
        article_embeddings = model.encode(scraped_texts, convert_to_tensor=True)

        similarities = util.cos_sim(main_embedding, article_embeddings)[0].cpu().numpy()
        avg_sim = round(float(np.mean(similarities)), 3)
        sim_scores = [round(float(sim), 3) for sim in similarities]

        # Optional label
        if avg_sim > 0.75:
            label = "high_similarity"
        elif avg_sim > 0.4:
            label = "moderate_similarity"
        else:
            label = "low_similarity"

        return {
            "label": label,
            "score": avg_sim,
            "individual_scores": sim_scores,
            "reason": f"Average cosine similarity is {avg_sim} across {len(sim_scores)} articles."
        }

    except Exception as e:
        return {
            "label": "error",
            "score": 0.0,
            "individual_scores": [],
            "reason": str(e)
        }